---
description: Exhaustive Pattern Matching with match
globs: "**/*.rs"
alwaysApply: true
---

For more context read: https://doc.rust-lang.org/book/ch06-02-match.html

- ALWAYS use `match` instead of nested `if-else` chains for enum handling
- Use `match` for exhaustive pattern matching to prevent runtime panics
- Add match guards (`if` conditions) for conditional patterns within matches
- Handle all variants explicitly - avoid catch-all patterns when possible
- Use `match` for HTTP methods, response types, and middleware returns in Robyn
- Pattern match on `Option` and `Result` types instead of using `unwrap()`

SCOPE: This applies to Rust enum handling, especially for HttpMethod, ResponseType, and MiddlewareReturn types in the Robyn codebase.

# Solution

Replace nested if-else chains with match statements:

```rust
// Instead of:
if method == HttpMethod::GET {
    handle_get()
} else if method == HttpMethod::POST {
    handle_post()
} else {
    handle_other()
}

// Use:
match method {
    HttpMethod::GET => handle_get(),
    HttpMethod::POST => handle_post(),
    _ => handle_other(),
}
```

Use match guards for conditional logic:

```rust
match response_type {
    ResponseType::Standard(resp) if resp.status_code >= 400 => handle_error(resp),
    ResponseType::Standard(resp) => handle_success(resp),
    ResponseType::Streaming(stream) => handle_stream(stream),
}
```